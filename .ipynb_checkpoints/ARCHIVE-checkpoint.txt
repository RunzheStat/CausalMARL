    #         grid = GridSearchCV(KernelDensity(), bandwidth_range)
    #         grid.fit(behav_states)
    #         den_fun_b = grid.best_estimator_
    #         print("best behav bandwidth: {0}".format(grid.best_estimator_.bandwidth), "\n", grid.cv_results_,"\n")

    #         grid = GridSearchCV(KernelDensity(), bandwidth_range)
    #         grid.fit(target_states)
    #         den_fun_target = grid.best_estimator_
    #         print("best target bandwidth: {0}".format(grid.best_estimator_.bandwidth), "\n",grid.cv_results_)
    
    
    
    
        
    
#     def evaluate(self, SASR0, policy0, policy1):
#         """ 
#         Similar functions with the above. For predicting new data points.
#         """
        
#         S = []
#         POLICY_RATIO = []
#         REW = []
#         for sasr in SASR0:
#             for state, action, next_state, reward in sasr:
#                 POLICY_RATIO.append(policy1(state, action)/policy0(state, action))
#                 S.append(state)
#                 REW.append(reward)

#         # normalization
#         S = np.array(S)
#         S_max = np.max(S, axis = 0)
#         S_min = np.min(S, axis = 0)
#         S = (S - S_min)/(S_max - S_min)
        
#         POLICY_RATIO = np.array(POLICY_RATIO)
#         REW = np.array(REW)
        
#         Density_ratio = self.get_density_ratio(S)
#         T = Density_ratio*POLICY_RATIO
#         return np.sum(T*REW)/np.sum(T)



#     def state_to_w(self, state, obs_dim, hidden_dim_dr):
#         """ Q: what is happening here? 4.
#         """
#         with tf.variable_scope('foo', reuse=tf.AUTO_REUSE): #, reuse = tf.AUTO_REUSE):
#             w = tf.ones([tf.shape(state)[0]])
#             for i in range(int(obs_dim / state_batch_dim
)):  # Q: not int() at first
#                 w_part_i = self.state_to_w_tl(state[:, state_batch_dim * (i): state_batch_dim * (i + 1)], state_batch_dim, hidden_dim_dr, i)
# #                 w_part_i = self.state_to_w_tl(state[:, i:(i + state_batch_dim)], state_batch_dim, hidden_dim_dr, i) # Q??
#                 w = w * w_part_i
#             return w
    
        
